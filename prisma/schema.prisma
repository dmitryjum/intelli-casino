// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}
 
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])

  @@index([userId], name: "account_userId_idx")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], name: "session_userId_idx")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  role          Role   @default(PLAYER)
  emailVerified DateTime?
  image    String?
  accounts Account[]
  sessions Session[]
  games Game[]
}

enum Role {
  PLAYER
  SPECTATOR
}

enum GameType {
  mcq
  open_ended
}

enum GameStatus {
  OPEN
  CLOSED
  FINISHED
}

model Game {
  id      String @id @default(cuid())
  userId  String
  status GameStatus @default(OPEN)
  openAt DateTime?
  timeStarted DateTime
  topic String
  timeEnded DateTime?
  gameType GameType
  currentQuestionIndex Int @default(0)
  currentQuestionStartTime DateTime?
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions Question[]


  @@index([userId], name: "game_userId_idx")
}

model Question {
  id String @id @default(cuid())
  question String
  answer String
  blankedAnswer String @default("")
  gameId String
  options Json? // for mcq questions (multiple choice questions)
  percentageCorrect Float? // for open ended questions (similarity between the user input)
  isCorrect Boolean? // for mcq questions only
  questionType GameType
  userAnswer String?
  game Game @relation(fields: [gameId], references: [id], onDelete: Cascade)
  
  @@index([gameId], name: "question_gameId_idx")
}

model TopicCount {
  id String @id @default(cuid())
  topic String @unique
  count Int
}